#+LATEX_HEADER: \usepackage{grffile}

#+LATEX_HEADER: \definecolor{mintedbackground}{rgb}{0.95,0.95,0.95}



#+LATEX_HEADER: \usepackage[inline]{enumitem} 
# #+LATEX_HEADER: \setdescription{style=multiline,leftmargin=3cm,font=\normalfont}

#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \hypersetup{
#+LATEX_HEADER:    colorlinks,
#+LATEX_HEADER:    linkcolor={red!50!black},
#+LATEX_HEADER:    citecolor={blue!50!black},
#+LATEX_HEADER:    urlcolor={blue!80!black}
#+LATEX_HEADER:}


#+LATEX_HEADER: \usepackage{tikz,graphics,graphicx}

#+LATEX_HEADER: \usetikzlibrary{decorations.shapes,arrows,decorations.pathreplacing,decorations.pathmorphing,backgrounds}
#+LATEX_HEADER: \usetikzlibrary{decorations.pathmorphing}
#+LATEX_HEADER: \usetikzlibrary{shapes.geometric}

#+LATEX_HEADER:\usepackage{setspace}%% The linestretch
#+LATEX_HEADER:\singlespacing

#+LATEX_HEADER:\usepackage[format=hang,indention=0cm,singlelinecheck=true,justification=raggedright,labelfont={normalsize,bf},textfont={normalsize}]{caption} % 


#+LATEX_HEADER:\usepackage{vmargin}
#+LATEX_HEADER:\setpapersize{A4}
#+LATEX_HEADER:\setmarginsrb{2.5cm}{1cm}% links, oben
#+LATEX_HEADER:                                                {2.5cm}{2cm}% rechts, unten
#+LATEX_HEADER:                                                {12pt}{30pt}% Kopf: Höhe, Abstand
#+LATEX_HEADER:                                                {12pt}{30pt}% Fuß: Höhe, AB     
                                                

# #+LATEX_HEADER:\usepackage[babel,english=british]{csquotes}

# #+LATEX_HEADER:% English quotes are used.                                       

#+LATEX_HEADER: \usepackage{upquote}
                                        
# #+LATEX_HEADER:\usepackage[english]{babel}                                     

                                

#+LATEX_HEADER: %  use straight quotes when printing a command in minted

#+LATEX_HEADER: \AtBeginDocument{%
#+LATEX_HEADER: \def\PYZsq{\textquotesingle}%
#+LATEX_HEADER: }        

#+LATEX_HEADER: \setlength{\parindent}{0pt}
#+LATEX_HEADER: \setlength{\parskip}{\baselineskip}

#+LATEX_HEADER: \definecolor{mintedbackground}{rgb}{0.95,0.95,0.95}



#+TITLE: *Genome Assembly* (2015-06-04)
#+AUTHOR: Alexander Jueterbock, Martin Jakt
#+DATE: *PhD course: High throughput sequencing of non-model organisms*
#+EMAIL: University of Nordland, Norway

#+OPTIONS: toc:t H:3 email:t author:t num:t creator:t


#+name: setup-minted
#+begin_src emacs-lisp :exports results :results silent
(setq org-latex-listings 'listings)
(setq org-latex-listings 'minted)
(setq org-latex-custom-lang-environments
        '((emacs-lisp "common-lispcode")))

(setq org-latex-minted-options
      '(("fontsize" "\\scriptsize")
        ("bgcolor=lightgray")
        ("linenos" "")))

(setq org-latex-to-pdf-process
           '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))	      
#+end_src


# Overview of export options in http://orgmode.org/manual/Export-settings.html#Export-settings

After removing adapters and bad-quality reads, we are ready for /de
novo/ assembly of the sequenced genome libraries. The number of
available genomes is increasing, also for non-model species (for
marine species, see for example [[http://cemeb.science.gu.se/research/imago-marine-genome-projects][The IMAGO Marine Genome
projects]]). Many analyses are only possible with a reference 
genome. Thus, /de novo/ assembly is a first important step for many
follow-up analyses, such as SNP-discovery for population-genomics or
differential-expression analysis based on RNAseq data.

* MIRA - assembler
The choice of /de novo/ sequence assemblers is wide ([[http://en.wikibooks.org/wiki/Next_Generation_Sequencing_%28NGS%29/De_novo_assembly#Creating_a_dataset][overview]]). Some
of the better known open-source assemblers include [[http://bioinf.spbau.ru/spades][SPAdes]], [[http://www.ebi.ac.uk/~zerbino/velvet/][Velvet]],
[[http://soap.genomics.org.cn/soapdenovo.html][SOAPdenovo]], and [[http://sourceforge.net/projects/mira-assembler/][MIRA]]. Have a look on [[http://gage.cbcb.umd.edu/index.html][GAGE]], which compares the
performance of major assembly strategies.

We use [[http://sourceforge.net/projects/mira-assembler/][MIRA]] in this tutorial because it can handle Ion Torrent
data. Please find its documentation [[http://mira-assembler.sourceforge.net/docs/DefinitiveGuideToMIRA.pdf][here]]. Use the following command to
get an overview of the parameters: 

#+begin_src sh 
mira --help
#+end_src

Before we start, we will create a folder that contains the data we
want to assemble:

#+begin_src sh
mkdir GenomeAssembly
cd GenomeAssembly
mkdir data
#+end_src 

copy your quality-trimmed fastq file into the =data= directory with the command =cp=. 

The configurations for =mira= are specified in a so-called
=manifest= file. We won't have much time to play around with different
setting in this tutorial and will choose the most simple settings for
a /de novo/ genome assembly with Ion Torrent reads.


To create the manifest file in your =GenomeAssembly= directory, use
the command =touch=:

#+begin_src sh
touch manifest.conf
#+end_src

Now, to edit this file, we can use the command-line program
=nano=. This allows to open and edit small text files from the command
line (no graphical user interface needed). To open the =manifest.conf=
file, just type:

#+begin_src sh
nano manifest.conf
#+end_src

Once you hit ENTER, =manifest.conf= will be opened. For now, it is
still empty. You can edit the content of the file by deleting and
adding text. At the bottom of the terminal window you see some
shortcuts for certain actions. For example =^O WriteOut= or =^X
Exit=. The =^= indicates that you need to press CTRL+O or CTRL+X.

The =manifest.conf= file shall have the following content:

#+begin_src sh
# Manifest file for de novo genome assembly with Ion Torrent single reads

project = IonTorrentDeNovoAssembly
job = denovo,genome,accurate

readgroup=UnpairedIonTorrentReadsFromHTSCourse2015
data = fastq::data/YOURINPUTFILE.fq
technology = iontor
#+end_src

You can copy these lines and paste them into your file by pressing
SHIFT+CTRL+V. Change the name =YOURINPUTFILE.fq= to the name of the
fastq-file that contains your quality-trimmed reads. Then save the
file and exit with CTRL+O and CTRL+X.

That's all you need before you can start =mira= with:

#+begin_src sh
nohup mira manifest.conf >log_assembly.txt &
#+end_src

The analysis will take about 1 hour to finish.

* Results and assembly metrics
MIRA creates a directory named =IonTorrentDeNovoAssembly_assembly= and several
subdirectories. We are primarily interested in the following two
subdirectories: 
- 1. =IonTorrentDeNovoAssembly_d_results=: this directory contains all the output
  files of the assembly in different formats. Here we are specifically
  interested in the following fasta files:
  - =IonTorrentDeNovoAssembly_out.padded.fasta=. This file contains the assembled contigs. Gaps are denoted by an asterisk.
  - =IonTorrentDeNovoAssembly_out.unpadded.fasta=. This file contains
    as well the assembled contigs. The positions containing gaps were removed.
  - =LargeContigs_out.fasta=. This file contains the longer contigs of
    your assembly, which are of particular interest. To be included in
    this file, a contig generally needs to be at least 500bp long and
    must have a coverage of at least 1/3 of the average coverage.
- 2. =IonTorrentDeNovoAssembly_d_info=: this directory contains information files of
  the final assembly. We are particularly interested in:
  - =IonTorrentDeNovoAssembly_info_assembly.txt=. This file contains
    summary statistics and informs about problematic areas in the
    results. Here, 'Consensus bases with [[http://www.bioinformatics.org/sms/iupac.html][IUPAC]]' refers to positions
    that are not clearly 'A', 'C', 'T', or 'G', but where two or more
    bases were equally likely. For example, 'R' refers to 'A or G', and
    'K' refers to 'G or T'.
  - =IonTorrentDeNovoAssembly_info_contigstats.txt=. This file
    contains statistics about the contigs themselves, their length,
    average consensus quality, number of reads, maximum and average
    coverage, average read length, number of A, C, G, T, N, X and gaps.
  

Search for the following information in =IonTorrentDeNovoAssembly_info_assembly.txt=:
- Number of contigs in the assembly 
- Maximum contig coverage
- Largest contig
- N50 contig size

Reminder on the N50 metric (see Fig. [[fig:N50]]):


#+CAPTION: From Kane, N.C.
#+name: fig:N50
#+ATTR_LaTeX: :width 11cm
[[file:N50.png]]



N50 measures the median contig length in a set of sequences. The
larger it is, the closer your assembly gets to the real genome. N50 is
obtained by:
- 1. Sorting contigs in descending length order.
- 2. Identifying the size of the contig above which the assembly contains at least 50% of the
  total length of all contigs.


We can use the program R to create histograms on the contig lengths
and coverages from the file
=IonTorrentDeNovoAssembly_info_contigstats.txt=. When you are in the
directory named =IonTorrentDeNovoAssembly_assembly= (if you are not in
this directory, you can move to it with the =cd= command), you can
copy and paste the following commands into your terminal window to
plot histograms on the contig lengths and the contig coverages:

#+begin_src sh
rm Rplothistogram.r # Use this if the file Rplothistogram.r already exists.

cat >> Rplothistogram.r << 'EOF'
contigs <- read.table(
  file="IonTorrentDeNovoAssembly_d_info/IonTorrentDeNovoAssembly_info_contigstats.txt", 
  sep="\t", header=FALSE)

png(filename = "ContigLengths.png",
  width = 480, height = 480, units = "px", pointsize = 12,
  bg = "white")
hist(contigs$V2,main="Histogram of contig lengths",
  xlab="Contig length (bp)",ylab="Frequency",col="blue",breaks=100)
dev.off()

png(filename = "ContigCoverages.png",
  width = 480, height = 480, units = "px", pointsize = 12,
  bg = "white")
hist(log10(contigs$V6),main="Histogram of average log10 contig coverages",
  xlab="Average log10 contig coverage",ylab="Frequency",col="blue",breaks=100)
dev.off()

EOF

R CMD BATCH Rplothistogram.r
#+end_src

To open the figures, you can use the =eog= command, which is the
Eye of Gnome graphics viewer program:

#+begin_src sh
eog ContigLengths.png
eog ContigCoverages.png
#+end_src


Example histograms of contig lengths and coverages are shown in
Fig. [[fig:histcontlength]] and [[fig:histcontcov]].

#+begin_latex
\clearpage
#+end_latex

#+CAPTION: Histogram of contig lengths
#+name: fig:histcontlength
#+ATTR_LaTeX: :width 8cm :float figure
[[file:ContigLengths.png]]


#+CAPTION: Histogram of contig coverages
#+name: fig:histcontcov
#+ATTR_LaTeX: :width 8cm :float figure
[[file:ContigCoverages.png]]





You can also extract the number of contigs>500bp and the sum of bases
in these contigs with R. Until now you have used R scripts with the =R
CMD BATCH= command, like the freshly created script =Rplothistogram.r=
above.

Instead of running =R= scripts from the shell command line, you can
also open an =R= command-line window where you can execute commands
directly. To start =R=, just type =R= in the terminal and hit
enter. All that comes after this command will be executed in the R
console. Lines preceded with a =#=-sign will be ignored and serve only as
non-executed comments.

#+begin_src R
R

# open the output file from MIRA
contigs <- read.table( 
file="IonTorrentDeNovoAssembly_d_info/IonTorrentDeNovoAssembly_info_contigstats.txt", 
  sep="\t", header=FALSE)

# Extract only those contigs that are longer than 500bp
contigs.above500 <- contigs[contigs[,2]>500,2]

# Count the number of contigs that are longer than 500bp
length(contigs.above500)
# Output for example: 156


# Count the number of bases in these contigs
sum(contigs.above500)
# Output for example 102297

# leave R again
q()
#+end_src



MIRA does not only assemble your reads but it comes with a command
line tool named =miraconvert=, which allows you to extract contigs
based on, for example, contig length and coverage (see in the [[http://mira-assembler.sourceforge.net/docs/DefinitiveGuideToMIRA.pdf][MIRA
documentation]] for further details and options).



* Next steps to consider

Hint: to identify the proportion of contigs that are protein-coding
and the proportion that may result from bacterial contamination, you
can use the Basic Local Alignment Search Tool ([[http://blast.ncbi.nlm.nih.gov/Blast.cgi][BLAST]]) to align the
contigs to databases with known genes and proteins.

MIRA assembles the reads to so-called contigs, which are based on
overlapping sequences. Contigs can be joined with mate-pair libraries
into longer fragments (often referred to as scaffolds, which are
basically contigs that were connected by gaps, see figure below). MIRA
does not perform scaffolding. This could be done with the stand-alone
[[http://www.baseclear.com/genomics/bioinformatics/basetools/SSPACE][SSPACE]] software.


#+caption: From sequencing reads to scaffolds
#+name: fig:contigsScaffolds
#+begin_latex :exports results 
\begin{center}
\begin{figure}[htb]
\setlength{\belowcaptionskip}{-1cm}
\scalebox{0.5}{
\begin{tikzpicture}

\node [anchor=east, scale=2] at (-1cm, 0.5cm) {Genome};
\node [anchor=east, scale=2,color=blue] at (-1cm, -2cm) {Reads};
\node [anchor=east, scale=2,color=orange] at (-1cm, -5cm) {Contigs};
\node [anchor=east, scale=2,color=gray] at (-1cm, -7cm) {Mate-pair};
\node [anchor=east, scale=2,color=red] at (-1cm, -9cm) {Scaffold};

\draw [line width=0.15cm, anchor=west] (0cm,0.5cm) -- (20cm,0.5cm);


\draw [line width=0.15cm, anchor=west,color=blue] (0cm,-0.5cm) -- (2cm,-0.5cm);
\draw [line width=0.15cm, anchor=west,color=blue] (0cm,-1cm) -- (2cm,-1.cm);
\draw [line width=0.15cm, anchor=west,color=blue] (1cm,-1.5cm) -- (3cm,-1.5cm);
\draw [line width=0.15cm, anchor=west,color=blue] (0cm,-2cm) -- (4cm,-2cm);
\draw [line width=0.15cm, anchor=west,color=blue] (2cm,-2.5cm) -- (3.5cm,-2.5cm);
\draw [line width=0.15cm, anchor=west,color=blue] (0.2cm,-3cm) -- (1.7cm,-3cm);

\draw [line width=0.15cm, anchor=west,color=blue] (12cm,-0.5cm) -- (15cm,-0.5cm);
\draw [line width=0.15cm, anchor=west,color=blue] (13cm,-1cm) -- (15.3cm,-1cm);
\draw [line width=0.15cm, anchor=west,color=blue] (11cm,-1.5cm) -- (13cm,-1.5cm);
\draw [line width=0.15cm, anchor=west,color=blue] (10.5cm,-2cm) -- (14cm,-2cm);
\draw [line width=0.15cm, anchor=west,color=blue] (11.7cm,-2.5cm) -- (15.6cm,-2.5cm);

\draw [line width=0.15cm, anchor=west,color=orange] (0cm,-5cm) -- (4cm,-5cm);
\draw [line width=0.15cm, anchor=west,color=orange] (10.5cm,-5cm) -- (15.6cm,-5cm);

\draw [line width=0.15cm, anchor=west,color=gray] (3cm,-7cm) -- (3.6cm,-7cm);
\draw [line width=0.05cm, dashed, anchor=west,color=gray] (3.6cm,-7cm) -- (11.3cm,-7cm);
\draw [line width=0.15cm, anchor=west,color=gray] (11.3cm,-7cm) -- (11.9cm,-7cm);

\draw [line width=0.15cm, anchor=west,color=red] (0cm,-9cm) -- (15.6cm,-9cm);

\end{tikzpicture}
} 
\end{figure}
\end{center}
#+end_latex



# 
#  genes in eukaryotes are present in the genome assembly XX Include
# info that the completeness of the genome can also be checked by
# checking for the presence of 250 or so of the most conservative gene
# regions (Florian Maumus has the pipeline to do that

* COMMENT XX PERL SCRIPT FROM MARTIN TO LOOK FOR ORFs and CODON USAGE, CPG proportion, CPG islands
* COMMENT USE THIS IN ANOTHEr TUTORIAL
** BATCH Jobs 
Look in the book 
' Computational biology


Show how to start a program with nohup and let it run on the remote
computer while we need not to be present

introduce also for i in ... as I used in the Guppy analysis

for i in $1;
do 
samtools view -Sh -q 20 -o $(echo $i | sed 's/.sam/MAPQ20.sam/')  "$i"; 
done 

** Look at alignments from the command line
   Use the text alignment viewer from samtools

also show how to visualize alignments in IGV
** Introduce PicardTools to work with sam files
** Remove duplicate reads
